{"version":3,"sources":["webpack:///./src/pages/page-2.tsx","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["SecondPage","props","title","path","to","styles","content","boxSizing","display","flexDirection","flexGrow","height","margin","maxWidth","padding","footer","width","icon","icons","gridAutoFlow","gridGap","main","alignItems","Layout","children","leftContent","href","rightContent","style","faLinkedin","faGithubSquare","Date","getFullYear","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","link","rel","titleTemplate","name","property","author","concat","defaultProps"],"mappings":"6FAAA,oEAgBeA,UATI,SAACC,GAAD,OACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,aACX,uDACA,iDAAuBD,EAAME,KAA7B,KACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,8B,mICFEC,EAAS,CACbC,QAAS,CACPC,UAAW,aACXC,QAAS,OACTC,cAAe,SACfC,SAAU,EACVC,OAAQ,qBACRC,OAAQ,OACRC,SAAU,IACVC,QAAS,IAEXC,OAAQ,CACNR,UAAW,aACXS,MAAO,QAETC,KAAM,CACJV,UAAW,aACXI,OAAQ,GACRK,MAAO,IAETE,MAAO,CACLX,UAAW,aACXC,QAAS,OACTG,OAAQ,GACRQ,aAAc,SACdC,QAAS,IAEXC,KAAM,CACJC,WAAY,SACZf,UAAW,aACXC,QAAS,OACTC,cAAe,MACfC,SAAU,EACVM,MAAO,SAoDIO,IAhDA,SAAC,GAET,IADLC,EACI,EADJA,SAEU,OAUV,OACE,oCACE,kBAAC,IAAD,CACEC,YACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,KAAK,sBAAX,eAGJC,aACE,yBAAKC,MAAOvB,EAAOa,OACjB,kBAAC,IAAD,CAAMQ,KAAK,iDACT,kBAAC,IAAD,CAAiBT,KAAMY,IAAYD,MAAOvB,EAAOY,QAEnD,kBAAC,IAAD,CAAMS,KAAK,kCACT,kBAAC,IAAD,CAAiBT,KAAMa,IAAgBF,MAAOvB,EAAOY,WAK7D,yBAAKW,MAAOvB,EAAOC,SACjB,0BAAMsB,MAAOvB,EAAOgB,MAAOG,GAC3B,4BAAQI,MAAOvB,EAAOU,QAAtB,MACK,IAAIgB,MAAOC,cADhB,mBAGE,uBAAGN,KAAK,4BAAR,e,mFCxEV,SAASO,EAAT,GAKI,IAJFC,EAIC,EAJDA,YACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,KACAlC,EACC,EADDA,MAEQmC,EADP,OACOA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFM,KAAM,CACJ,CACEf,KAAM,kEACNgB,IAAK,eAGTxC,MAAOA,EACPyC,cAAa,QAAUN,EAAKE,aAAarC,MACzCkC,KAAM,CACJ,CACEQ,KAAK,cACLtC,QAASgC,GAEX,CACEO,SAAS,WACTvC,QAASJ,GAEX,CACE2C,SAAS,iBACTvC,QAASgC,GAEX,CACEO,SAAS,UACTvC,QAAQ,WAEV,CACEsC,KAAK,eACLtC,QAAQ,WAEV,CACEsC,KAAK,kBACLtC,QAAS+B,EAAKE,aAAaO,QAE7B,CACEF,KAAK,gBACLtC,QAASJ,GAEX,CACE0C,KAAK,sBACLtC,QAASgC,IAEXS,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-page-2-tsx-7b7da27e729eae0d2afd.js","sourcesContent":["// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SecondPage = (props: PageProps) => (\n  <Layout>\n    <SEO title=\"Page two\" />\n    <h1>Hi from the second page</h1>\n    <p>Welcome to page 2 ({props.path})</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default SecondPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithubSquare, faLinkedin } from '@fortawesome/free-brands-svg-icons';\n\nimport Link from \"./Link\"\nimport Nav from \"./Nav\"\nimport SmallTitle from \"./SmallTitle\"\n\nconst styles = {\n  content: {\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    height: 'calc(100vh - 78px)',\n    margin: 'auto',\n    maxWidth: 960,\n    padding: 20,\n  },\n  footer: {\n    boxSizing: 'border-box',\n    width: '100%',\n  },\n  icon: {\n    boxSizing: 'border-box',\n    height: 22,\n    width: 22,\n  },\n  icons: {\n    boxSizing: 'border-box',\n    display: 'grid',\n    height: 22,\n    gridAutoFlow: 'column',\n    gridGap: 12,\n  },\n  main: {\n    alignItems: 'center',\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexDirection: 'row',\n    flexGrow: 1,\n    width: '100%',\n  },\n}\n\nconst Layout = ({\n  children,\n}) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Nav\n        leftContent={\n          <SmallTitle>\n            <Link href=\"https://google.com\">Contact Me</Link>\n          </SmallTitle>\n        }\n        rightContent={\n          <div style={styles.icons}>\n            <Link href=\"https://www.linkedin.com/in/isaiah-c-solomon/\">\n              <FontAwesomeIcon icon={faLinkedin} style={styles.icon} />\n            </Link>\n            <Link href=\"https://github.com/isaiah-solo\">\n              <FontAwesomeIcon icon={faGithubSquare} style={styles.icon} />\n            </Link>\n          </div>\n        }\n      />\n      <div style={styles.content}>\n        <main style={styles.main}>{children}</main>\n        <footer style={styles.footer}>\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({\n  description,\n  lang,\n  meta,\n  title,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      link={[\n        {\n          href: \"https://fonts.googleapis.com/css2?family=Open+Sans&display=swap\",\n          rel: \"stylesheet\",\n        },\n      ]}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}